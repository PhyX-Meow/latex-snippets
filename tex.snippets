global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment():
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
	return x != '0' and y != '0'

endglobal


snippet template "My template" b
\documentclass[UTF8,12pt]{article}
\usepackage{phyxmeow}
\geometry{a4paper,scale=0.8}
\allowdisplaybreaks{}

\title{$1}
\author{$2}

\begin{document}
\maketitle

$0

\end{document}
endsnippet

snippet beg "begin{} / end{}" b
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet sec "section" bA
\section{$1}
$0
endsnippet

snippet xse "section*" bA
\section*{$1}
$0
endsnippet

snippet sse "subsection" bA
\subsection{$1}
$0
endsnippet

snippet ssx "subsection*" bA
\subsection*{$1}
$0
endsnippet

snippet sss "subsubsection" bA
\subsubsection{$1}
$0
endsnippet

snippet xss "subsubsection*" bA
\subsubsection*{$1}
$0
endsnippet

priority 200
snippet ,... "ldots" iA
,\ldots
endsnippet

priority 100
snippet ... "cdots" iA
\cdots 
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" b
\begin{enumerate}[$1]
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" b
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet => "implies" iA
\implies 
endsnippet

snippet =< "implied by" iA
\impliedby 
endsnippet

context "math()"
snippet iff "iff" iA
\iff 
endsnippet

snippet mk "Inline Math" wA
\(${1:${VISUAL}}\)`!p
if t[2] and t[2][0] not in ['，','。',',', '.', ':', '?', '-', ' ','\n']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Display Math" wA
\[
	${1:${VISUAL}}
.\] $0
endsnippet

snippet ali "Align" b
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet


context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
snippet quo "Quotient" iA
/
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet != "not equal" iA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

priority 200
context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor $0
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix}$0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix}$0
endsnippet

snippet lr "left( right)" i
\left(${1:${VISUAL}}\right) $0
endsnippet

snippet lr| "left| right|" i
\left|${1:${VISUAL}}\right| $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{${1:${VISUAL}}\right\\} $0
endsnippet

snippet lrs "left[ right]" i
\left[${1:${VISUAL}}\right] $0
endsnippet

snippet lra "leftangle rightangle" i
\left<${1:${VISUAL}}\right>$0
endsnippet

snippet pair "pair" i
\left<$1,$2\right> $0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

context "math()"
snippet dual "dual space" iA
^*
endsnippet

snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet pp "to the ... power" iA
^{$1}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet '([^a-z])oo' "infinity" riA
`!p snip.rv=match.group(1)`\infty
endsnippet

context "math()"
snippet cnk "choose" w
{$1\choose $2}$0
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet EE "exists" iA
\exists`!p
if t[0] and t[0][0] not in ['(', '[', '-', ' ']:
	snip.rv = '\,'
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet E! "exists" iA
\exists`!p
if t[0] and t[0][0] not in ['(', '[', '-', ' ']:
	snip.rv = '\,'
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet AA "forall" iA
\forall`!p
if t[0] and t[0][0] not in ['(', '[', '-', ' ']:
	snip.rv = '\,'
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet


context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

snippet R0+ "R0+" iA
\\R_0^+
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet cal "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet bb "mathbb" iA
\mathbb{$1}$0
endsnippet

context "math()"
snippet mrm "mathrm" iA
\mathrm{$1}`!p
if t[0] and t[0][0] not in ['(', '[', '-', ' ', '_']:
	snip.rv = '\,'
else:
	snip.rv = ''
`$0
endsnippet

snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

context "math()"
snippet and "logical and" iA
\land 
endsnippet

priority 10
context "math()"
snippet orr "logical or" iA
\lor 
endsnippet

context "math()"
snippet vee "vee" iA
\vee 
endsnippet

context "math()"
snippet Vee "big vee" iA
\bigvee 
endsnippet

context "math()"
snippet wge "wedge product" iA
\wedge 
endsnippet

context "math()"
snippet Wge "big wedge product" iA
\bigwedge
endsnippet

context "math()"
snippet tens "tensor product" iA
\otimes 
endsnippet

context "math()"
snippet Tens "big tensor product" iA
\bigotimes
endsnippet

context "math()"
snippet dsum "direct sum" iA
\oplus 
endsnippet

context "math()"
snippet Dsum "big direct sum" iA
\bigoplus
endsnippet

priority 100
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet 'nrom|norm' "norm" riA
\|$1\|$0
endsnippet

context "math()"
snippet abs "abs" iA
|$1|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|csc|sec|tan|cot|log|exp|perp|gcd|det|dim|ker|img)' "log" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec)' "arcsin" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(ord|dom|ran|card)' "card" rwA
\\`!p
snip.rv = match.group(1)
if t[0] and t[0][0] not in ['(', '[', '-', ' ']:
	snip.rv += '\,'
else:
	snip.rv += ''
`$0
endsnippet

priority 150
context "math()"
snippet '(?<!th|.\\|.b)eta' "eta" rwA
\eta
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(Gamma|Delta|Theta|Lambda|Phi|Psi|Sigma|Omega)' "Alpha" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(alpha|beta|gamma|delta|zeta|theta|iota|lambda)' "alpha" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200 
context "math()"
snippet '(?<!\\)(mu|pi|rho|sigma|tau|phi|chi|psi|omega)' "omega" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet eps "epsilon" wA
\varepsilon
endsnippet

priority 300
context "math()"
snippet vthe "vartheta" wA
\vartheta
endsnippet

priority 300
context "math()"
snippet 'vphi' "varphi" rwA
\varphi
endsnippet

priority 300
context "math()"
snippet kpa "kappa" wA
\kappa
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet


priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet --> "xrightarrow" iA
\xrightarrow{$1}$0
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

priority 100
context "math()"
snippet into "inclution" iA
\hookrightarrow
endsnippet

context "math()"
snippet intR "integration over R" iA
\int_{\mathbb{R${1:^n}}}$0
endsnippet

context "math()"
snippet int "integration over R" w
\int_{$1}^{$2}$3\dx $0
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet comp "composite" iA
\circ 
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet

snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet ~= "similar" iA
\simeq 
endsnippet

context "math()"
snippet '(iso|eqv)' "equivalent" riA
\cong 
endsnippet

context "math()"
snippet 'cong' "congruence" riA
\equiv 
endsnippet

context "math()"
snippet '(?<!sup|sub)set' "set" riA
\\{${1:${VISUAL}}\\}$0
endsnippet

snippet || "mid" iA
 \mid 
endsnippet

priority 100
context "math()"
snippet cc "subset" Ai
\subset 
endsnippet

priority 200
context "math()"
snippet pcc "proper subset" Ai
\subsetneq 
endsnippet

snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

snippet NN "n" iA
\mathbb{N}
endsnippet

snippet Nn "cap" iA
\cap 
endsnippet

priority 100
snippet UU "cup" iA
\cup 
endsnippet

priority 200
snippet DUU "sqcup" iA
\sqcup 
endsnippet

snippet uuu "bigcup" iA
\bigcup_{${1:i\in ${2:I}}} $0
endsnippet

snippet duu "bigsqcup" iA
\bigsqcup_{${1:i\in ${2:I}}} $0
endsnippet

snippet nnn "bigcap" iA
\bigcap_{${1:i\in ${2:I}}} $0
endsnippet

snippet OO "emptyset" iA
\emptyset
endsnippet

snippet RR "real numbers" iA
\mathbb{R}
endsnippet

snippet QQ "rationals" iA
\mathbb{Q}
endsnippet

snippet ZZ "integers" iA
\mathbb{Z}
endsnippet

snippet HH "upper half plane" iA
\mathbb{H}
endsnippet

snippet CC "complex numbers" iA
\mathbb{C}
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet

context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1}$0
endsnippet

context "math()"
snippet '(?<!co)tt' "text" irA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet 'tid' "tilde" riA
\tilde{$1}$0
endsnippet

priority 100
context "math()"
snippet '((\\)?[a-zA-Z]+)tid' "tilde" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet 'bar' "bar" riA
\overline{${1:${VISUAL}}}$0
endsnippet

priority 100
context "math()"
snippet '((\\)?[a-zA-Z]+)bar' "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet 'hat' "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet '((\\)?[a-zA-Z]+)hat' "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

# vim:ft=snippets
